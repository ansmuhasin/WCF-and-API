//! Web services
//+ WCF is Microsoft platform for building distributed and interoperable applications.
//+ In simple terms a distributed application, is an application where parts of it run on 2 or more computers. Distributed
//+ applications are also called as connected systems.
//+ A web application running on one machine and a web service that this application is consuming is running on another machine.
//+ used to improve scalability. and for giving our services to others or use others services
//+ Why should we use WCF?
//+ We have 2 clients and we need to implement a service a for them.
//+ 1. The first client wants messages to be in XML format and the protocol to be HTTP.
//+ 2. The second clientwants messages formatted in binary over TCP protocol.
//+ With WCF,
//+ You implement one service and we can configure as many end points as want to support all the client needs. To support the above 2
//+ client requirements, we would configure 2 end points. In the endpoint configuration we can specify the protocols and message
//+  formats that we want to use.

//+ Add a class library project and delete the class autogenerated. add a new item and add wcf service to the project. it adds referance to system.service model assmbly. it is the core to wcf. it added 2 files. an interface and a class. and it have service contract. by adding it, we make it to a wcf service. and the method have operationcontract attribute. making that method available to the client. create functions both in interface and class. we need to host the wcf application. we can host in multiple places.
//+ add a console application.to host, add referance to system.service.model. and add to our service. and make the configuration. add configuration. add application configuration file to the host project.
//+ inside the config file, <system.serviceModel>. inside that add <services> . then add <service name="fully qualified name of the service" as we need to add 2 end points, we needs to have 3 things, create <endpoint>. <endpoint address="HelloService" binding="basicHttpBinding" contract="interface name">
//+ for second client, <endpoint address ="HelloService" binding="netTcpBinding" contract="HelloService.IHelloService"></endpoint>. we need to expose one more binding, which is for exchaning meta data <endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange"</endpoint>. this should be same , the point and the contract.
//+ another thing we need to do id add the base address. for that we need to add a <host> and then <baseAddresses> then we add 2 addresses. <add baseAddress="http://localhost:8080/"/> . for second <add baseAddress="net.tcp://localhost:8090/"/>
//+ we need to specify service behavious. add <behaviors> then <serviceBehaviors> then<behavior name="mexBehaviour">.this is to allow the service to exchange the meta data. inside add <serviceMetadata httpGetEnables="true"/> and add the behaviour name to service as behaviourConfiguration.
//+ now open service host class and add servicemodel namespace. then add
using(ServiceHost host = new ServiceHost(typeof(Service name HelloService.HelloService))){
    host.open();
}
//= create the applications to use it and run it. 
//+ if we go that local url, we can some info

//+ if we have multipleservices contract available,  we need to configure both service endpoint
In WSDL document, we have something called portType. You can think of this portType as the interface the client uses to communicate with the wcf service. When you don't set the Name property on a service contract attribute, by default the name attribute of the portType xml element in WSDL will be the name of the service contract interface. If you set an explicit Name for the service contract using Name property then that Name will be used for the portType.

In a similar fashion you can set Name property for an OperationContract as shown below.
[ServiceContract(Name = "IHelloService")]
public interface IHelloServiceChanged
{
    [OperationContract(Name = "GetMessage")]
    string GetMessageChanged(string name);
}


//+ three things.
// creating a service, hosting the service, consuming the service
//+ we need an interface and a class
//+ for hosting, we can add a new website and select wcf ervice